//Dependencies
var Events,
	EventEmitter = require('events').EventEmitter;
	OOP = require('ws-oop.js/OOP.js');

/**
 * A class that allows us to make objects fire events when a method is run.
 * @class Events
 * @memberOf module:edu/dat
 * @constructor
 */
Events = (function() {

	function Events()
	{
		this.num = 0;
		this.emitter = new EventEmitter();
	};

	/**
	 * Use a key:value class collection to capture events on methods run on classes
	 * for a module.
	 * @instance
	 * @memberOf module:edu/dat.Events
	 * @method eventifyModule
	 * @param  {Object} module     A key:value class collection.
	 * @param  {String} moduleName A string name for the module.
	 * @return {Object}            The 'eventified' key:value class collection.
	 */
	Events.prototype.eventifyModule = function(module, moduleName) 
	{
		for(var key in module) {
			module[key] = this.eventifyClass(module[key], moduleName + "." + key);
		}
		return module;
	};

	/**
	 * Change a class toapture events on methods as they are run.
	 * @instance
	 * @memberOf module:edu/dat.Events
	 * @method eventifyClass
	 * @param  {Function} obj     The class.
	 * @param  {String} className The name of the class.
	 * @return {Function}         The class with all of it's methods 'eventified'.
	 */
	Events.prototype.eventifyClass = function(obj, className)
	{

		var keys = [];

		for(var key in obj.prototype) {
				
			if(typeof obj.prototype[key] === "function") {

				keys[keys.length] = key;

			}

		}

		var Override = (function(_super, _keys, _cname, _emitter) {

			OOP.__extends(Override, _super);

			function Override()
			{
				return Override.__super__.constructor.apply(this, arguments);
			};

			for (var i = 0; i < _keys.length; i++) {
				if(undefined !== typeof _keys[i]) {

					Override.prototype[_keys[i]] = (function(_key, _obj, _parent, _cname, _emitter){

						return function() {

							var result = _obj.__super__[_key].apply(this, arguments);

							var data = [
								arguments,
								result,
								this, // context
								_key, // method name
								_cname // class name
							];

							_emitter.emit(_cname + "." + _key, data[0], data[1], data[2], data[3], data[4]);

							return result;
						};

					})(_keys[i], Override, _super, _cname, _emitter);
 					
				}
			};

			return Override;

		})(obj, keys, className, this.emitter);

		return Override;

	};

	return Events;

})();

module.exports = Events;