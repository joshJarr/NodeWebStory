var OOP = require('ws-oop.js'),
	DIC = require('./DIC'),
	Http = require('http'),
	Url = require('url'),
	Connect = require('connect'),
	cookieSession = require('cookie-session');

/**
 * A class that allows us to construct a basic web
 * Application.
 * @class Application
 * @memberOf module:edu/dat/Web
 * @extends module:edu/dat/Web.DIC
 * @constructor
 */
var Application;

Application = (function(_super) {

	OOP.__extends(Application, _super);

	function Application()
	{

		this.port = 80;
		this.router = false;

		Application.__super__.constructor.apply(this, arguments);

	};

	/**
	 * Get the port that the webserver will run on.
	 * @instance
	 * @memberOf module:edu/dat/Web.Application
	 * @method getPort
	 * @return {Integer} The port number.
	 */
	Application.prototype.getPort = function()
	{
		return this.port;
	};

	/**
	 * set the port that the webserver will run on.
	 * @instance
	 * @memberOf module:edu/dat/Web.Application
	 * @method setPort
	 * @param {Integer} port [description]
	 * @return {module:edu/dat/Web.Application} This application.
	 */
	Application.prototype.setPort = function(port)
	{
		this.port = port;
		return this;
	};

	/**
	 * Set the router object that the server uses to match url's to controllers.
	 * @instance
	 * @memberOf module:edu/dat/Web.Application
	 * @method setRouter
	 * @param {module:node_simple_router:router} router The router object.
	 * @return {module:edu/dat/Web.Application} This application.
	 */
	Application.prototype.setRouter = function(router)
	{

		this.router = router;
		var app = this;

		//Add this app to the router handlers as a parameter and fix the request query.
		var verbs = ["get", "put", "post", "delete", "error"];
		var origs = [];

		for (var i = 0; i < verbs.length; i++) {
			
			for (var j = 0; j < this.router.listeners[verbs[i]].length; j++) {

				var pointer = origs.length;
				origs[pointer] = this.router.listeners[verbs[i]][j].callback;

				this.router.listeners[verbs[i]][j].callback = (function(orig) {

					function over(request, response, args)
					{
						request.query = Url.parse(request.url, true).query;
						orig(app, request, response, args);
					};

					return over;
					
				})(origs[pointer]);


			};
		};

		return this;
	};

	/**
	 * get the router object that the server uses to match url's to controllers.
	 * @instance
	 * @memberOf module:edu/dat/Web.Application
	 * @method getRouter
	 * @return {module:node_simple_router:router} router The router object.
	 */
	Application.prototype.getRouter = function()
	{
		return this.router;
	};

	/**
	 * Run the web server on the port that was set.
	 * @instance
	 * @memberOf module:edu/dat/Web.Application
	 * @method setRouter
	 * @return {module:edu/dat/Web.Application} This application.
	 */
	Application.prototype.run = function()
	{
		var app = this;
		var c = Connect();

		c.use(cookieSession({
		    keys: [
		    	'd7c67dbca7af96b2f01b86b880158fab8026ca360cc83dfa525b71732dd668ae79ee1fcee7eef06e2d332e08ab5c2abbddb645b1eb6e1df70de1aa8dc35b1c98',
		    	'6f64cb437d995825321a1ef3400d9b741cfd4356bb40ac59f707ea462cd1062acf5eea047b7c727097c6836566ca5d7ce26bccb79b2644150fd6775a0f4a4356'
		    ]
		}));

		c.use(function(request, response) {
			this.router.handleRequest(request, response);
		}.bind(this));

		console.log('Http Server listening on ' + this.port);
		var server = Http.createServer(c);
		server.listen(this.port);
		return this;
	};

	return Application;

})(DIC);

module.exports = Application;