//Dependencies
var Url = require('url');
var serveStatic = require('serve-static');

var Router;

/**
 * A class that assigns callbacks to urls and http methods
 * @class Router
 * @memberOf module:edu/dat/Web
 * @constructor
 */
Router = (function() {

	function Router()
	{

		this.listeners = {
			"get": [],
			"put": [],
			"post": [],
			"delete": [],
			"error": []
		};

		this.http = false;
		this.publicDir = '';

	};

	/**
	 * Assign a callback to a given path
	 * that will be run when a GET request occurs.
	 * @instance
	 * @memberOf module:edu/dat/Web.Router
	 * @method get
	 * @param  {String}   path     The url path e.g. / or /user
	 * @param  {Function} callback The callback method.
	 * @return {null}
	 */
	Router.prototype.get = function(path, callback)
	{	
		this.addRoute('get', path, callback);
	};
	
	/**
	 * Assign a callback to a given path
	 * that will be run when a PUT request occurs.
	 * @instance
	 * @memberOf module:edu/dat/Web.Router
	 * @method put
	 * @param  {String}   path     The url path e.g. / or /user
	 * @param  {Function} callback The callback method.
	 * @return {null}
	 */
	Router.prototype.put = function(path, callback)
	{	
		this.addRoute('put', path, callback);
	};

	/**
	 * Assign a callback to a given path
	 * that will be run when a POST request occurs.
	 * @instance
	 * @memberOf module:edu/dat/Web.Router
	 * @method post
	 * @param  {String}   path     The url path e.g. / or /user
	 * @param  {Function} callback The callback method.
	 * @return {null}
	 */
	Router.prototype.post = function(path, callback)
	{	
		this.addRoute('post', path, callback);
	};

	/**
	 * Assign a callback to a given path
	 * that will be run when a DELETE request occurs.
	 * @instance
	 * @memberOf module:edu/dat/Web.Router
	 * @method get
	 * @param  {String}   path     The url path e.g. / or /user
	 * @param  {Function} callback The callback method.
	 * @return {null}
	 */
	Router.prototype.delete = function(path, callback)
	{	
		this.addRoute('delete', path, callback);
	};

	/**
	 * Assign a callback to a given path
	 * that will be run when a DELETE request occurs.
	 * @instance
	 * @memberOf module:edu/dat/Web.Router
	 * @method delete
	 * @param  {String}   path     The url path e.g. / or /user
	 * @param  {Function} callback The callback method.
	 * @return {null}
	 */
	Router.prototype.delete = function(path, callback)
	{	
		this.addRoute('delete', path, callback);
	};

	/**
	 * Assign a callback to a given when you want to 
	 * return a result that represents a HTTP error.
	 * @instance
	 * @memberOf module:edu/dat/Web.Router
	 * @method error
	 * @param  {String}   code     The http error code e.g. 404
	 * @param  {Function} callback The callback method.
	 * @return {null}
	 */
	Router.prototype.error = function(code, callback)
	{	
		this.addRoute('error', code, callback);
	};

	/**
	 * Add a route to the list.
	 * @instance
	 * @memberOf module:edu/dat/Web.Router
	 * @method addRoute
	 * @param  {String}   method   The http method (get,put,post or delete).
	 * @param  {String}   path     The url path e.g. / or /user
	 * @param  {Function} callback The callback method.
	 * @return {null}
	 */
	Router.prototype.addRoute = function(method, path, callback)
	{

		var listener = {"path": path.toLowerCase(), "callback": callback};

		this.listeners[method][this.listeners[method].length] = listener;

	};

	/**
	 * Handle the request that the http server gave us.
	 * This method should be passed as the http listener
	 * e.g. http.createServer(router.handleRequest).
	 * @instance
	 * @memberOf module:edu/dat/Web.Router
	 * @method handleRequest
	 * @param  {http.IncomingMessage} request  HTTP request object.
	 * @param  {http.ServerResponse}  response HTTP response object.
	 * @return {null} 
	 */
	Router.prototype.handleRequest = function(request, response)
	{

		var serve = serveStatic(this.publicDir, {'index': []});

		serve(
			request,
			response,
			function onNext(err) {

				var method = request.method.toLowerCase();

				var wasTriggered = this.triggerListener(method, request.url, request, response);
				
				if(wasTriggered) {
					//Do nothing.
				} else {
					var wasErrorTriggered = this.triggerErrorListener('404', request, response);
					if(!wasErrorTriggered) {
						//close the response.
						response.end();
					}
				}

			}.bind(this)
		);

		

	};

	/**
	 * Trigger an error listener.
	 * @instance
	 * @memberOf module:edu/dat/Web.Router
	 * @method triggerErrorListener
	 * @param  {String} 			  code     The http error code e.g. 404
	 * @param  {http.IncomingMessage} request  HTTP request object.
	 * @param  {http.ServerResponse}  response HTTP response object.
	 * @return {boolean} True/False depending on whether an appropriate listener was found.
	 */
	Router.prototype.triggerErrorListener = function(code, request, response)
	{
		return this.triggerListener('error', code, request, response);
	}

	/**
	 * Trigger a listener.
	 * @instance
	 * @memberOf module:edu/dat/Web.Router
	 * @method triggerListener
	 * @param  {String}				  method   The http method (get,put,post or delete).
	 * @param  {String} 			  url      The url that we need to match these listeners against e.g. http://127.0.0.1:8080/path
	 * @param  {http.IncomingMessage} request  HTTP request object.
	 * @param  {http.ServerResponse}  response HTTP response object.
	 * @return {boolean} True/False depending on whether an appropriate listener was found.
	 */
	Router.prototype.triggerListener = function(method, url, request, response)
	{

		if(url.length > 1 && url.slice(-1) == '/') {
			url = url.substring(0, url.length - 1);
		}
		
		url = Url.parse(url, true);

		//If we have a list of listeners for the request method then run.
		if("undefined" !== typeof this.listeners[method]) {

			for (var i = 0; i < this.listeners[method].length; i++) {

				var matchData = this.match(this.listeners[method][i].path, url);

				if(matchData.isMatch) {
					this.listeners[method][i].callback(request, response, matchData.data);
					return true;
				}

			};

		}

		return false;
	};

	/**
	 * Attempt to match a url against a given route.
	 * @instance
	 * @memberOf module:edu/dat/Web.Router
	 * @method match
	 * @param  {String} routePath The path of a given route e.g. /path, /path/{key}
	 * @param  {String} url       The url that we need to match this route against e.g. http://127.0.0.1:8080/path
	 * @return {Object}   		  An object containing isMatch (true/false depending on whether the route matches).
	 */
	Router.prototype.match = function(routePath, url)
	{

		var path = url.pathname;

		//Do the simplest and easierst match first.
		if(path == '/' && routePath == '/') {
			return {"isMatch": true, "data": {}};
		}

		var routePathParts = routePath.split('/');
		var pathParts = path.split('/');

		if(routePathParts.length == pathParts.length) {

			var numStatic = 0;
			var staticParts = {};
			var dynamicParts = {};
			var data = {};

			for (var i = 0; i < routePathParts.length; i++) {
				if(routePathParts[i].match(/\{|\}/g) !== null) {
					dynamicParts[i] = routePathParts[i].replace(/\{|\}/g, '');
				} else {
					numStatic++;
					staticParts[i] = routePathParts[i];
				}
			};

			var foundStatic = 0;

			for (var i = 0; i < pathParts.length; i++) {
				
				if(typeof dynamicParts[i] !== "undefined") {

					data[dynamicParts[i]] = pathParts[i];

				} else if(typeof staticParts[i] !== "undefined") {

					if(staticParts[i] == pathParts[i]) {
						foundStatic++;
					}

				}

			};

			return {"isMatch": (foundStatic == numStatic), "data": data};
		}

		return {"isMatch": false, "data": {}};
	};

	/**
	 * Set the file path where all of the static assets are located.
	 * These are typically media, css and javascript files.
	 * @instance
	 * @memberOf module:edu/dat/Web.Router
	 * @method setPublicDir
	 * @param {String} dir The directory to use.
	 * @return {module:edu/dat/Web.Router} This router
	 */
	Router.prototype.setPublicDir = function(dir)
	{
		this.publicDir = dir;
		return this;
	};

	/**
	 * Get the file path where all of the static assets are located.
	 * These are typically media, css and javascript files.
	 * @instance
	 * @memberOf module:edu/dat/Web.Router
	 * @method getPublicDir
	 * @param {String} dir The directory to use.
	 * @return {module:edu/dat/Web.Router} This router
	 */
	Router.prototype.getPublicDir = function()
	{
		return this.publicDir;
	};

	return Router;

})();

module.exports = Router;