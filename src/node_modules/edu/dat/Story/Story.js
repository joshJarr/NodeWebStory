//Dependencies...
var FileSystem = require("fs"),
	StoryLocation = require('./StoryLocation.js'),
	Actor = require('./Actor.js');

/**
 * This class allows us to capture and create a story
 * that contains locations and actors (items/characters).
 * @class Story
 * @memberOf module:edu/dat/Story
 * @constructor
 */
var Story;

Story = (function() {

	/**
	 * Constructs a blank story for us to use.
	 */
	function Story()
	{
		this.locations = {};
		this.actors = {};
		this.locationClass = StoryLocation;
		this.actorClass = Actor;
	};

	/**
	 * Add a location to the story.
	 * @instance
	 * @memberOf module:edu/dat/Story.Story
	 * @method addLocation
	 * @param {String} name A url-friendly name for the location.
	 * @param {StoryLocation} obj The location object.
	 * @return {module:edu/dat/Story.Story} This story.
	 */
	Story.prototype.addLocation = function(name, obj)
	{

		this.locations[name] = obj;
		
	};

	/**
	 * Remove a location from the story.
	 * @instance
	 * @memberof module:edu/dat/Story.Story
	 * @method removeLocation
	 * @param {String} name A url-friendly name for the location.
	 * @return {module:edu/dat/Story.Story} This story.
	 */
	Story.prototype.removeLocation = function(name)
	{
		delete this.locations[name];
		return this;
	};

	/**
	 * Does this story have a location with the provided name?
	 * @instance
	 * @memberof module:edu/dat/Story.Story
	 * @method hasLocation
	 * @param {String} name A url-friendly name for the location.
	 * @return {Boolean} True / False
	 */
	Story.prototype.hasLocation = function(name)
	{
		return (undefined !== this.locations[name]);
	};

	/**
	 * Fetch a location object for the provided name.
	 * @instance
	 * @memberof module:edu/dat/Story.Story
	 * @method fetchLocation
	 * @param {String} name A url-friendly name for the location.
	 * @return {StoryLocation} The location.
	 */
	Story.prototype.fetchLocation = function(name)
	{
		return this.locations[name];
	};

	/**
	 * Fetch a list of locations according to an array of names.
	 * @instance
	 * @memberof module:edu/dat/Story.Story
	 * @method fetchLocations
	 * @param {String[]} names A list of url-friendly names for locations.
	 * @return {module:edu/dat/Story.StoryLocation[]} The locations.
	 */
	Story.prototype.fetchLocations = function(names)
	{

		var list = [];

		for (var i = 0; i < names.length; i++) {
			list[i] = this.fetchLocation(names[i]);
		};

		return list;

	};

	/**
	 * Add an actor to the story.
	 * @instance
	 * @memberof module:edu/dat/Story.Story
	 * @method addActor
	 * @param {String} name A url-friendly name for the actor.
	 * @param {Actor} obj The actor object.
	 * @return {module:edu/dat/Story.Story} This story.
	 */
	Story.prototype.addActor = function(name, obj)
	{
		this.actors[name] = obj;
		return this;
	};

	/**
	 * Remove an actor from the story.
	 * @instance
	 * @memberof module:edu/dat/Story.Story
	 * @method removeActor
	 * @param {String} name A url-friendly name for the actor.
	 * @return {module:edu/dat/Story.Story} This story.
	 */
	Story.prototype.removeActor = function(name)
	{
		delete this.actors[name];
		return this;
	};

	/**
	 * Does this story have an actor with the provided name?
	 * @instance
	 * @memberof module:edu/dat/Story.Story
	 * @method hasActor
	 * @param {String} name A url-friendly name for the actor.
	 * @return {Boolean} True / False
	 */
	Story.prototype.hasActor = function(name)
	{
		return (undefined !== this.actors[name]);
	};

	/**
	 * Fetch an actor object for the provided name.
	 * @instance
	 * @memberof module:edu/dat/Story.Story
	 * @method fetchActor
	 * @param {String} name A url-friendly name for the actor.
	 * @return {Actor} The actor.
	 */
	Story.prototype.fetchActor = function(name)
	{
		return this.actors[name];
	};

	/**
	 * Fetch a list of actors according to an array of names.
	 * @instance
	 * @memberof module:edu/dat/Story.Story
	 * @method fetchActors
	 * @param {String} names A list of url-friendly names for actors.
	 * @return {module:edu/dat/Story.Actor[]} The actors.
	 */
	Story.prototype.fetchActors = function(array)
	{

		var list = [];

		for (var i = 0; i < array.length; i++) {
			list[i] = this.fetchActor(array[i]);
		};

		return list;

	};

	/**
	 * Set the actors list for this story.
	 * @instance
	 * @memberof module:edu/dat/Story.Story
	 * @method setActors
	 * @param {module:edu/dat/Story.Actor[]} actors The list of actor objects.
	 * @return {module:edu/dat/Story.Story} This story.
	 */
	Story.prototype.setActors = function(actors)
	{
		this.actors = actors;
		return this;
	};

	/**
	 * Get a list of all of the actors in this story.
	 * @instance
	 * @memberof module:edu/dat/Story.Story
	 * @method getActors
	 * @return {module:edu/dat/Story.Actor[]} A list of actor objects.
	 */
	Story.prototype.getActors = function()
	{
		return this.actors;
	};

	/**
	 * Set the locations list for this story.
	 * @instance
	 * @memberof module:edu/dat/Story.Story
	 * @method setLocations
	 * @param {module:edu/dat/Story.StoryLocation[]} actors The list of location objects.
	 * @return {module:edu/dat/Story.Story} This story.
	 */
	Story.prototype.setLocations = function(locations)
	{
		this.locations = locations;
		return this;
	};

	/**
	 * Get a list of all of the locations in this story.
	 * @instance
	 * @memberof module:edu/dat/Story.Story
	 * @method getLocations
	 * @return {module:edu/dat/Story.StoryLocation[]} A list of location objects.
	 */
	Story.prototype.getLocations = function()
	{
		return this.locations;
	};

	/**
	 * Build up all of the actors and locations
	 * for this story from a json file.
	 * @instance
	 * @param  {String} filepath The path to the json file.
	 * @return {module:edu/dat/Story.Story} This story.
	 */
	Story.prototype.buildFromJsonFile = function(filepath)
	{
		var text = FileSystem.readFileSync(filepath, "utf8");
		var json = JSON.parse(text);

		for (var key in json.locations) {

			var loc = new this.locationClass(),
				obj = json.locations[key];
			
			loc.loadData(obj, key);

			this.addLocation(key, loc);

		};

		for (var key in json.actors) {

			var actor = new this.actorClass(),
				obj = json.actors[key];

			actor.loadData(obj, key);

			this.addActor(key, actor);

		};

		return this;

	};

	return Story;

})();

module.exports = Story;