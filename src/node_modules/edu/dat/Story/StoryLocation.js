
/**
 * This class allows us to create story locations
 * that contain actors and exits to other story locations.
 * @class Story
 * @memberOf module:edu/dat/Story
 * @constructor
 */
var StoryLocation;

StoryLocation = (function() {

	function StoryLocation()
	{
		this.name = "";
		this.key = "";
		this.description = "";
		this.directions = {};
		this.actors = [];
		this.exits = [];
		this.data = {};
	};

	/**
	 * Set the name of this location.
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method setName
	 * @param {String} name This actors name.
	 */
	StoryLocation.prototype.setName = function(name)
	{
		this.name = name;
		return this;
	};

	/**
	 * Get the name of this location.
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method getName
	 * @return {String} This actors name.
	 */
	StoryLocation.prototype.getName = function()
	{
		return this.name;
	};

	/**
	 * Set the url-firendly name for this location.
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method setKey
	 * @param {String} key The url-friendly name for this location.
	 * @return {module:edu/dat/Story.StoryLocation} This location.
	 */
	StoryLocation.prototype.setKey = function(key)
	{
		this.key = key;
		return this;
	};

	/**
	 * Get the url-firendly name for this location.
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method getKey
	 * @return {String} The url-friendly name for this location.
	 */
	StoryLocation.prototype.getKey = function()
	{
		return this.key;
	};

	/**
	 * Set this actors description.
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method setDescription
	 * @param {String} description The description to use.
	 * @return {module:edu/dat/Story.StoryLocation} This location.
	 */
	StoryLocation.prototype.setDescription = function(description)
	{
		this.description = description;
		return this;
	};

	/**
	 * Get this actors description
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method getDescription
	 * @return {String} This actor's description.
	 */
	StoryLocation.prototype.getDescription = function()
	{
		return this.description;
	};

	/**
	 * Set the list of actors in this location.
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method setActors
	 * @param {module:edu/dat/Story.Actor[]} actors A list of actor objects.
	 * @return {module:edu/dat/Story.StoryLocation} This location.
	 */
	StoryLocation.prototype.setActors = function(actors)
	{
		this.actors = actors;
		return this;
	};

	/**
	 * Get the list of actors in this location.
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method getActors
	 * @return {module:edu/dat/Story.Actor[]} A list of actor objects.
	 */
	StoryLocation.prototype.getActors = function()
	{
		return this.actors;
	};

	/**
	 * Set the list of exits from this location.
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method setExits
	 * @param {Object} exits A list of Exit data encapsulated within an object.
	 * @return {module:edu/dat/Story.StoryLocation} This location.
	 */
	StoryLocation.prototype.setExits = function(exits)
	{
		this.exits = exits;
		
		for (var key in this.exits) {
			this.directions[this.exits[key].direction] = true;
		};

		return this;
	};

	/**
	 * Get the list of exits from this location.
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method getExits
	 * @return {Object} A list of Exit data encapsulated within an object.
	 */
	StoryLocation.prototype.getExits = function()
	{
		return this.exits;
	};

	/**
	 * Load data from a generic object into this location.
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method loadData
	 * @param  {Object} obj The object containing the data to load.
	 * @param  {String} key A url-friendly name for this actor
	 * @return {module:edu/dat/Story.StoryLocation} This location.
	 */
	StoryLocation.prototype.loadData = function(obj, key)
	{
		this.setKey(key);
		this.setName(obj.name);
		this.setDescription(obj.description);
		this.setActors(obj.actors);
		this.setExits(obj.exits);

		for(objKey in obj) {

			if(
				objKey != 'name'
				&& objKey != 'description'
				&& objKey != 'actors'
				&& objKey != 'exits'
			) {
				this.data[objKey] = obj[objKey];
			}

		}

		return this;
	};

	/**
	 * Get the list of any misc data that is linked to this location.
	 * Note: This data is typically anything else other than the name, description, actors and exits
	 * that's included in the json file.
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method getData
	 * @return {Object} A list of data encapsulated within an object.
	 */
	StoryLocation.prototype.getData = function()
	{
		return this.data;
	};

	/**
	 * Set the list of misc data for this location.
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method setData
	 * @param {Object} data A list of data encapsulated within an object.
	 * @return {module:edu/dat/Story.StoryLocation} This location.
	 */
	StoryLocation.prototype.setData = function(data)
	{
		this.data = data;
		return this;
	};

	/**
	 * Does an exit exist in the direction supplied?
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method canIGo
	 * @param  {String} direction The name of the direction e.g. "north".
	 * @return {Boolean}          True/False.
	 */
	StoryLocation.prototype.canIGo = function(direction)
	{

		return !(undefined === typeof this.directions[direction]);

	};

	/**
	 * What exit is in this direction?
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method whatIsInDirection
	 * @param  {String} direction The name of the direction e.g. "north".
	 * @return {Object|Boolean}   An object containing the data regarding an exit or
	 *                            false if there is no exit in that direction.
	 */
	StoryLocation.prototype.whatIsInDirection = function(direction)
	{
		if(this.canIGo(direction)) {

			for(var key in this.exits) {
				if(this.exits[key].direction === direction) {
					return this.exits[key];
				} 
			}

			return false;

		} else {
			return false;
		}
	};

	/**
	 * Get a list of strings that tell me what directions I can go.
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method whereCanIGoFromHere
	 * @return {String[]} A list of string names for directions.
	 */
	StoryLocation.prototype.whereCanIGoFromHere = function()
	{

		var keys = [];

		for(var key in this.exits) {
			keys[keys.length] = key;
		}

		return keys;

	};

	/**
	 * Where do I go from here to get to this new location.
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method whatDirectionIsThisIn
	 * @param  {module:edu/dat/Story.StoryLocation} location The location object.
	 * @return {String|Boolean} The name of the direction that the location is in.
	 *                          Or false if you cannot get to the provided location from this one.
	 */
	StoryLocation.prototype.whatDirectionIsThisIn = function(location)
	{

		for(var key in this.exits) {
			if(this.exits[key].destination === location) {
				return this.exits[key].direction;
			}
		}

		return false;

	};

	/**
	 * Get the list of actors in this location.
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method whatIsHere
	 * @return {module:edu/dat/Story.Actor[]} A list of actor objects.
	 */
	StoryLocation.prototype.whatIsHere = function()
	{
		return this.actors;
	};

	/**
	 * Add this actor to the list of actors.
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method putThisHere
	 * @param  {module:edu/dat/Story.Actor} actor The actor object.
	 * @return {module:edu/dat/Story.StoryLocation} This location.
	 */
	StoryLocation.prototype.putThisHere = function(actor)
	{
		this.actors[this.actors.length] = actor.getKey();
		return this;
	};

	/**
	 * Add a list of actors this actor to the list of actors that are in this location.
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method putTheseHere
	 * @param  {module:edu/dat/Story.Actor[]} actors A list of actor objects.
	 * @return {module:edu/dat/Story.StoryLocation} This location.
	 */
	StoryLocation.prototype.putTheseHere = function(actors)
	{
		for (var i = 0; i < actors.length; i++) {
			this.putThisHere(actors[i]);
		};
		return this;
	};

	/**
	 * Remove an actor/all actors from the list of actors that are in this location.
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method takeThisAway
	 * @param  {module:edu/dat/Story.Actor} actor The actor to remove.
	 * @param  {Boolean} all  True/False depending on whether you want to
	 *                        remove all of the actors with the same name or just one.
	 * @return {module:edu/dat/Story.StoryLocation} This location.
	 */
	StoryLocation.prototype.takeThisAway = function(actor, all)
	{

		all = (undefined === typeof all) ? false : all;

		var key = actor.getKey(),
			newActors = []

		for (var i = 0; i < this.actors.length; i++) {

			if(this.actors[i] !== key) {
				newActors[newActors.length] = this.actors[i];
			} else if(!all) {
				//Change the key so that the removal only happens once.
				key = false;
			}
			
		};

		this.setActors(newActors);

		return this;

	};

	/**
	 * Remove all actors from the list of actors that are in this location.
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method takeAllOfThisAway
	 * @param  {module:edu/dat/Story.Actor} actor The actor to remove.
	 * @return {module:edu/dat/Story.StoryLocation} This location.
	 */
	StoryLocation.prototype.takeAllOfThisAway = function(actor)
	{
		this.takeThisAway(actor, true);
		return this;
	};

	/**
	 * Remove an actor/all actors from the list of actors that are in this location that are
	 * in a list that your specify.
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method takeTheseAway
	 * @param  {module:edu/dat/Story.Actor} actor The actor to remove.
	 * @param  {Boolean} all  True/False depending on whether you want to
	 *                        remove all of the actors with the same name or just one
	 *                        (for each actor in the list.).
	 * @return {module:edu/dat/Story.StoryLocation} This location.
	 */
	StoryLocation.prototype.takeTheseAway = function(actors, all)
	{

		all = (undefined === typeof all) ? false : all;

		for (var i = 0; i < actors.length; i++) {
			this.takeThisAway(actor, all);
		};

		return this;

	};
	/**
	 * Remove an actor/all actors from the list of actors that are in this location that are
	 * in a list that your specify.
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method takeAllOfTheseAway
	 * @param  {module:edu/dat/Story.Actor[]} actor The actors to remove.
	 * @return {module:edu/dat/Story.StoryLocation} This location.
	 */
	StoryLocation.prototype.takeAllOfTheseAway = function(actors)
	{

		this.takeTheseAway(actors, true);

	};

	/**
	 * How many actors are in this location that have the same name as the provided actor.
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method howManyOfThisAreHere
	 * @param  {module:edu/dat/Story.Actor} actor The actor to remove.
	 * @return {Integer} The number of actors.
	 */
	StoryLocation.prototype.howManyOfThisAreHere = function(actor)
	{

		var count = 0,
			key = actor.getKey();
		
		for (var i = 0; i < this.actors.length; i++) {
			
			if(this.actors[i] = key) {
				count++;
			}

		};

		return count;

	};

	/**
	 * Is there an actor in this location that have the same name as the provided actor.
	 * @instance
	 * @memberOf module:edu/dat/Story.StoryLocation
	 * @method isThisHere
	 * @param  {module:edu/dat/Story.Actor} actor The actor to remove.
	 * @return {Boolean}       True/False.
	 */
	StoryLocation.prototype.isThisHere = function(actor)
	{

		for (var i = 0; i < this.actors.length; i++) {
			
			if(this.actors[i] = key) {
				return true;
			}

		};

		return false;

	};

	return StoryLocation;

})();

module.exports = StoryLocation;